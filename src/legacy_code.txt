Old Driving Scenario
            /* if (SCENARIO == 5) {

                int r_value;

                while (runflag) {
                    r_value = drive_to_pos(robo0, posstart, 40, 6000000);
                    usleep(r_value);
                    r_value = drive_to_pos(robo0, pos0, 40, 6000000);
                    usleep(r_value);
                    r_value = drive_to_pos(robo0, pos1, 40, 10000000);
                    usleep(r_value);
                    r_value = drive_to_pos(robo0, pos2, 40, 10000000);
                    usleep(r_value);
                    r_value = drive_to_pos(robo0, pos3, 40, 10000000);
                    usleep(r_value);
                    r_value = drive_to_pos(robo0, pos4, 40, 10000000);
                    usleep(r_value);
                    r_value = drive_to_pos(robo0, pos5, 40, 10000000);
                    usleep(r_value);
                    r_value = drive_to_pos(robo0, pos6, 40, 10000000);
                    usleep(r_value);

                    runflag = 0;
                }
            } */

MAC and batterie read-out
            /*

            //Now let's print out some information about the robot...
            //uint8_t mac[6];
            //robo.GetMac(mac);
            cout << "Robo @ rfcomm" << rfcomm_nr <<" with Mac: ";


            for (int j = 0; j < 5; j++)
                    cout << hex << (int) mac[j] << ":";
            cout << hex << (int) mac[5] << endl;

            cout << "\t Battery Voltage: " << dec << (int) robo.GetAccuVoltage()
                            << "mV" << endl;
            cout << "\t initial position: " << robo.GetPos() << endl;
            cout << "\t initial rotation: " << robo.GetPhi() << endl;

            */

Change single robot
/*
        //Activate the project option "Run in terminal" in Ctrl+5 (Ctrl+2 to come back here)
        //to use "cin" function.

        char cInput;

        cout << "Specify rfcomm number of the robot you want to move. Blue 0-2, Red 3-5: ";
        while (1) {
                cin >> cInput;
                if (!((cInput >= '0') && (cInput <= '7'))) {
                        cout << "Please specify valid rfcomm number between 0 and 7"
                                        << endl;
                } else {
                        rfcomm_nr = cInput-48; //simple "char to int" function
                        break;
                }
        }
*/

Old drive_to_pos with P controller
/*
int drive_to_pos(RoboControl &robo, Position &goal_pos, int velo, int move_time) {
    robo.GotoXY(goal_pos.GetX(), goal_pos.GetY(), velo, true);

    // get current position, current orientation and goal orientation
    Position cur_pos = robo.GetPos();
    Angle cur_phi = robo.GetPhi();
    Angle goal_phi = cur_pos.AngleOfLineToPos(goal_pos);

    int ddeg, v_left, v_right;
    int base_velo = velo;
    int run_ms = 200;
    int ramp_up = 0;

    // baseline solution: turn and move then
    robo.TurnAbs(goal_phi);
    usleep(500000);

    /** Drive while the distance is above a threshold */
    while ((abs(robo.GetX() - goal_pos.GetX()) > 0.1) || (abs(robo.GetY() - goal_pos.GetY()) > 0.1)) {
        cur_pos = robo.GetPos();
        cur_phi = robo.GetPhi();
        goal_phi = cur_pos.AngleOfLineToPos(goal_pos);

        ddeg = goal_phi.Deg() - cur_phi.Deg();
        v_left = base_velo - (ddeg/2);
        v_right = base_velo + (ddeg/2);

        robo.MoveMs(v_left, v_right, run_ms, ramp_up);

    }

    // Return estimated movement time
    if (move_time == 0) {
        move_time = 10000000;
    }
    return 0;



}
*/

Old constants.h
#include "kogmo_rtdb.hxx"
#include "robo_control.h"

/** Define outer positions for all six robots */
Position posb0_out(-0.5, -0.6);
Position posb1_out(0.0, -0.6);
Position posb2_out(0.5, -0.6);
Position posr0_out(-0.5, 0.6);
Position posr1_out(0.0, 0.6);
Position posr2_out(0.5, 0.6);

/** Define inner positions for all six robots */
Position posb0_in(-0.2, -0.1);
Position posb1_in(0.0, -0.1);
Position posb2_in(0.2, -0.1);
Position posr0_in(-0.2, 0.1);
Position posr1_in(0.0, 0.1);
Position posr2_in(0.2, 0.1);

/** Define other position for robot 0 */
Position posstart(-0.7, 0.0);
Position posgoal(0.7, 0.0);

Position pos0(0.7, 0.0);
Position pos1(0.7, 0.2);
Position pos2(0.7, 0.7);
Position pos3(0.2, 0.7);
Position pos4(-0.2, 0.7);
Position pos5(-0.7, 0.7);
Position pos6(-0.7, 0.0);


MEASURE FOR DRIVE_PARALLEL WHICH RUNTIME RESULTS IN WHICH RUNWAY
/** Define orientations */
Angle to_pc(0);
Angle to_wall(180);

    /* int run_time = 100;
    int time_step = 100;
    for (run_time = 100; run_time <= 1000; run_time = run_time + time_step) {

        // Test forward
        this->MoveMs(v_left, v_right, run_time, TURN_RAMP_UP);
        usleep((run_time+500) * 1000 + 1000000);

        r0 = r1;
        r1 = this->GetPos();

        cout << "'+" << "\t'" << run_time << "\t'" << this->calc_dist(r1, r0) << endl;

        // Test backward
        this->MoveMs(-v_left, -v_right, run_time, TURN_RAMP_UP);
        usleep((run_time+500) * 1000 + 1000000);

        r0 = r1;
        r1 = this->GetPos();

        cout << "'-" << "\t'" << run_time << "\t'" << this->calc_dist(r1, r0) << endl;
    } */
